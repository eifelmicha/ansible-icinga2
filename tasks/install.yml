---

- include_tasks: check_installed.yml

- block:
    - name: download icinga2 package
      become: true
      become_user: aur_builder
      shell: |
        cd ~
        git clone https://github.com/bodsch/aur-icinga2 icinga2
        cd icinga2/
        git pull

    - name: get package version
      become: true
      become_user: aur_builder
      shell: |
        cd ~/icinga2/
        grep pkgver= PKGBUILD | awk -F '=' '{printf $2}'
      register: __packaged_icinga2_version

    - name: set package icinga2 version
      set_fact:
        packaged_icinga2_version: "{{ __packaged_icinga2_version.stdout }}"
        cacheable: true
      when: __packaged_icinga2_version is defined and __packaged_icinga2_version.rc is defined and __packaged_icinga2_version.rc == 0

    - block:
        - name: compare versiones
          debug:
            msg: current installed version {{ icinga2_installed_version }} - we need an update to version {{ packaged_icinga2_version }}

        - name: build icinga2 package
          become: true
          become_user: aur_builder
          shell: |
            cd ~/icinga2/
            makepkg --syncdeps --install --noprogressbar --noconfirm
      when: packaged_icinga2_version is version( icinga2_installed_version ,'>')

  when: (
    icinga2_use_external_repo | bool and
    ansible_os_family | lower == 'archlinux')

- block:
    - name: create policy-rc.d
      copy:
        dest: /usr/sbin/policy-rc.d
        content: |
          #!/bin/bash
          exit 101
        mode: 0755

    - name: install icinga2 packages
      package:
        name: "{{ item }}"
        state: present
      register: icinga2_installer
      loop:
        - "{{ icinga2_dependencies }}"

    - name: do facts module to get latest information
      setup:

    - name: remove policy-rc.d
      file:
        path: /usr/sbin/policy-rc.d
        state: absent
  when:
    - not icinga2_installed
    - ansible_os_family | lower != 'archlinux'

- include_tasks: check_installed.yml

- name: detect icinga2_user  # noqa 301 306
  shell: |
    grep ": \${ICINGA2_USER" /usr/lib/icinga2/prepare-dirs | cut -d'=' -f2 | cut -d'"' -f2
  register: _icinga2_user

- name: set icinga2_user to {{ _icinga2_user.stdout }}
  set_fact:
    icinga2_user: "{{ _icinga2_user.stdout }}"
  when: _icinga2_user.stdout is defined

- name: detect icinga2_group  # noqa 301 306
  shell: |
    grep ": \${ICINGA2_GROUP" /usr/lib/icinga2/prepare-dirs | cut -d'=' -f2 | cut -d'"' -f2
  register: _icinga2_group

- name: set icinga2_group to {{ _icinga2_group.stdout }}
  set_fact:
    icinga2_group: "{{ _icinga2_group.stdout }}"
  when: _icinga2_group.stdout is defined


- name: create custom fact file
  template:
    src: facts.d/icinga2.fact.j2
    dest: /etc/ansible/facts.d/icinga2.fact
    owner: root
    group: root
    mode: 0755

- name: do facts module to get latest information
  setup:

- name: Install Icinga2 packages on Debian / Ubuntu
  apt:
    name: "{{ packages }}"
  vars:
    packages:
    - icinga2-common
    - icinga2-bin
    - icinga2
    - libmonitoring-plugin-perl
    - libwww-perl
    - monitoring-plugins
    - nagios-plugins-contrib
    - pynag
    - python-requests
    - python3-requests
  when: ansible_os_family | lower == 'debian' and icinga2_install_plugins | bool
  tags:
  - icinga2
  - packages

- name: Install Icinga2 Debian Plugin Package
  apt:
    deb: https://s3.qu.michaelsiebertz.de/seed/icinga2-plugins.deb
  when: ansible_os_family | lower == 'debian' and icinga2_install_plugins | bool
  tags:
  - icinga2

- name: Create symbolic link for check_mem
  file:
   src: "{{ monitoring_plugins_directory }}/check_memory"
   dest: "{{ monitoring_plugins_directory }}/check_mem"
   state: link
  when: ansible_os_family | lower == 'debian' and icinga2_install_plugins | bool
  tags:
  - icinga2

- name: check /etc/icinga2/conf.d/
  find:
    paths: /etc/icinga2/conf.d/
    patterns: ".*.conf"
    use_regex: true
  register: wildcard_files_to_delete

- name: clean /etc/icinga2/conf.d/
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ wildcard_files_to_delete.files }}"
